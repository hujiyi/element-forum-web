{"version":3,"sources":["webpack:///./src/views/home/pages/BoardList.vue?f2d8","webpack:///./src/model/category.js","webpack:///src/views/home/pages/BoardList.vue","webpack:///./src/views/home/pages/BoardList.vue?d53d","webpack:///./src/views/home/pages/BoardList.vue","webpack:///./src/api/service/topic_service.js"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticClass","attrs","_v","_l","item","index","key","colors","length","staticRenderFns","Category","title","description","views","reply","getUser","user","id","username","get","email","prototype","fromJson","level","topicCount","createdAt","updatedAt","createdBy","lastEditor","component","TABLE_NAME","TopicService","table_name","BaseService","getTopicByCategory","limit","query","LC","Query","board","Object","createWithoutData","equalTo","descending","addDescending","find","response","console","log"],"mappings":"uHAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,YAAY,OAAO,CAACF,EAAG,SAAS,CAACA,EAAG,SAAS,CAACG,MAAM,CAAC,GAAK,EAAE,GAAK,GAAG,OAAS,IAAI,CAACP,EAAIQ,GAAG,QAAQJ,EAAG,SAAS,CAACE,YAAY,qBAAqBC,MAAM,CAAC,GAAK,GAAG,OAAS,IAAI,CAACP,EAAIQ,GAAG,SAAS,GAAGR,EAAIS,GAAIT,EAAc,YAAE,SAASU,EAAKC,GAAO,OAAOP,EAAG,MAAM,CAACQ,IAAID,GAAO,CAACP,EAAG,eAAe,CAACG,MAAM,CAAC,KAAOG,EAAK,MAAQV,EAAIa,OAAOF,EAAQX,EAAIa,OAAOC,YAAY,OAAM,IAC7cC,EAAkB,G,oGCIhBC,G,oBACF,aAAsC,IAA1BC,EAA0B,uDAApB,GAAIC,EAAgB,uDAAJ,GAAI,uBAClCjB,KAAKgB,MAAQA,EACbhB,KAAKiB,YAAcA,EACnBjB,KAAKkB,MAAQ,EACblB,KAAKmB,MAAQ,IA+BrB,SAASC,EAAQC,GAEb,MAAO,CACHC,GAAID,EAAKC,GACTC,SAAUF,EAAKG,IAAI,YACnBC,MAAOJ,EAAKG,IAAI,UA/BxBT,EAASW,UAAUC,SAAW,SAAUlB,GACpC,MAAO,CACHa,GAAIb,EAAKa,GACTN,MAAOP,EAAKe,IAAI,SAChBP,YAAaR,EAAKe,IAAI,eACtBI,MAAOnB,EAAKe,IAAI,SAChBK,WAAYpB,EAAKe,IAAI,cACrBM,UAAWrB,EAAKqB,UAChBC,UAAWtB,EAAKsB,UAOhBC,UAAWvB,EAAKe,IAAI,aACdJ,EAAQX,EAAKe,IAAI,cACjB,GACNS,WAAYxB,EAAKe,IAAI,cACfJ,EAAQX,EAAKe,IAAI,eACjB,KAcET,QC/BhB,G,UAAA,CACE,KAAF,YACE,WAAF,CAEI,YAAJ,WAAM,OAAN,kDAGE,KAAF,WAAI,MAAJ,CACM,OAAN,+CACM,WAAN,GACM,SAAN,GACM,YAAN,IAEE,QAbF,WAcI,KAAJ,iBAEE,QAAF,CACI,cADJ,WACM,IAAN,OAAM,OAAN,qDAAQ,IAAR,IAAQ,OAAR,iFACA,gBACA,+BAFA,SAGA,wDAHA,OAGA,EAHA,OAIA,6DAJA,iDCnCiX,I,YCO7WmB,EAAY,eACd,EACApC,EACAgB,GACA,EACA,KACA,KACA,MAIa,aAAAoB,E,wJCdTC,EAAa,QAKbC,E,wDACF,WAAYC,GAAY,oCAEpB,cAAMA,GAEN,EAAKF,WAAaE,EAJE,E,UADDC,QAgB3BF,EAAaV,UAAUa,mBAAvB,yDAA4C,WAAgBjB,GAAhB,gHAAoBkB,EAApB,+BAA4B,EAA5B,SAGhCC,EAAQ,IAAIC,IAAGC,MAAM3C,KAAKmC,YACxBS,EAAQF,IAAGG,OAAOC,kBAAkB,WAAYxB,GAJlB,SAKfmB,EAAMM,QAAQ,WAAYH,GAC1CI,WAAW,SACXC,cAAc,aACdT,MAAMA,GACNU,OAT+B,cAKhCC,EALgC,OAUpCC,QAAQC,IAAI,sBAAuBF,GAVC,kBAW7BA,GAX6B,qCAapCC,QAAQC,IAAI,UAAZ,MAboC,iCAejC,MAfiC,0DAA5C,sDAqBe,WAAIjB,EAAaD","file":"js/chunk-53a2faa1.c14e9df9.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"p-2\"},[_c('el-row',[_c('el-col',{attrs:{\"md\":9,\"sm\":24,\"offset\":1}},[_vm._v(\"版块\")]),_c('el-col',{staticClass:\"hidden-sm-and-down\",attrs:{\"md\":13,\"offset\":1}},[_vm._v(\"最新\")])],1),_vm._l((_vm.categories),function(item,index){return _c('div',{key:index},[_c('latest-topic',{attrs:{\"item\":item,\"color\":_vm.colors[index % _vm.colors.length]}})],1)})],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","\r\n/**\r\n * 这个定义了，但是没用上\r\n */\r\n\r\nclass Category {\r\n    constructor(title='', description='') {\r\n        this.title = title;\r\n        this.description = description;\r\n        this.views = 0;\r\n        this.reply = 0;\r\n    }\r\n}\r\n\r\n\r\nCategory.prototype.fromJson = function (item) {\r\n    return {\r\n        id: item.id,   // leancloud Class 自带属性，对应 leanclud Class 中的 \"ObjectId\", 可以用\".id\"直接引用\r\n        title: item.get(\"title\"),  // title 为自定义的属性名，要使用 get() 来取值 \r\n        description: item.get(\"description\"),\r\n        level: item.get(\"level\"),\r\n        topicCount: item.get(\"topicCount\"),\r\n        createdAt: item.createdAt,   // leancloud Class 自带属性,创建时间,不能修改值\r\n        updatedAt: item.updatedAt,   // leancloud Class 自带属性,最后修改时间,只能leancloud 自动修改\r\n\r\n        /**\r\n         * createdBy、lastEditor 指向另一个表的字段, 默认只能得到该字段在关联表中的id 值\r\n         * 要得到完整值， 查询时字段名要包含在 include 中，\r\n         * 取值时，要先判断是否为空，如果为空，取值会抛出异常，\r\n         */\r\n        createdBy: item.get(\"createdBy\")\r\n            ? getUser(item.get(\"createdBy\"))\r\n            : \"\",\r\n        lastEditor: item.get(\"lastEditor\")\r\n            ? getUser(item.get(\"lastEditor\"))\r\n            : \"\",\r\n\r\n    }\r\n}\r\n\r\n// 获取用户表中各个字段的值\r\nfunction getUser(user) {\r\n    // console.log(user);\r\n    return {\r\n        id: user.id,\r\n        username: user.get(\"username\"),\r\n        email: user.get(\"email\"),\r\n    };\r\n}\r\nexport default  Category;","<template>\r\n    <div class=\"p-2\">\r\n        <el-row>\r\n            <el-col :md=\"9\" :sm=\"24\" :offset=\"1\">版块</el-col>\r\n            <el-col :md=\"13\" :offset=\"1\" class=\"hidden-sm-and-down\">最新</el-col>\r\n        </el-row>\r\n        <div v-for=\"(item, index) in categories\" :key=\"index\">\r\n            <!-- index % colors.length: 表示用索引号 除 颜色数量取余数,实现在多个颜色的循环使用 -->\r\n            <latest-topic :item=\"item\" :color=\"colors[index % colors.length]\"></latest-topic>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport CategoryService from \"../../../api/service/category_service\";\r\nimport TopicService from \"../../../api/service/topic_service\";\r\nimport Category from '../../../model/category';\r\nimport moment from 'moment';\r\nexport default {\r\n    name: 'BoardList',\r\n    components: {\r\n        // Board: () => import('../components/Board.vue')\r\n        LatestTopic: () => import('../components/LatestTopic.vue'),\r\n\r\n    },\r\n    data: () => ({\r\n        colors: ['red', 'blue', 'Gold', 'SeaGreen', 'DarkMagenta'],\r\n        categories: [],\r\n        pageSize: 10,        // 每页大小\r\n        currentPage: 1,      // 当前页\r\n    }),\r\n    mounted() {\r\n        this.getCategories();\r\n    },\r\n    methods: {\r\n        async getCategories() {\r\n            this.categories = [];\r\n            let skip = (this.currentPage - 1) * this.pageSize;\r\n            let response = await CategoryService.fetchAll(this.pageSize, skip, [], ['-level', 'createdAt']);\r\n            this.categories = response.map(item => { return new Category().fromJson(item) });\r\n        },\r\n    },\r\n\r\n\r\n}\r\n</script>\r\n\r\n<style>\r\n</style>","import mod from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js!../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BoardList.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js!../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BoardList.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./BoardList.vue?vue&type=template&id=8c191ca2&\"\nimport script from \"./BoardList.vue?vue&type=script&lang=js&\"\nexport * from \"./BoardList.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import LC from 'leancloud-storage';  // 导入 leancloud 数据存储模块\r\nimport BaseService from './base_service';  // 导入访问 leancloud 数据存储的基类\r\n\r\n\r\nconst TABLE_NAME = 'Topic';  // leancloud 中存储数据的表名(Class)\r\n\r\n/**\r\n * 对leancloud应用中 名为 \"Topic\" 的 Class 进行数据操作的类\r\n */\r\nclass TopicService extends BaseService {\r\n    constructor(table_name) {\r\n        // 调用父类的构造函数\r\n        super(table_name);\r\n        // 当前子类的属性 this.TABLE_NAME\r\n        this.TABLE_NAME = table_name;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * \r\n * @param {*} id 版块的id\r\n * @param {*} limit 返回的记录数\r\n * @returns \r\n */\r\nTopicService.prototype.getTopicByCategory = async function (id, limit = 5) {\r\n    // console.log(`category id:`, id);\r\n    try {\r\n        let query = new LC.Query(this.TABLE_NAME);\r\n        const board = LC.Object.createWithoutData('Category', id);\r\n        let response = await query.equalTo('category', board)\r\n            .descending('level')           // 降序\r\n            .addDescending('createdAt')    // 第二个排序字段：创建时间降序\r\n            .limit(limit)\r\n            .find();\r\n        console.log('getTopicByCategory:', response);\r\n        return response\r\n    } catch (e) {\r\n        console.log('查询数据错误：', e);\r\n    }\r\n    return null;\r\n}\r\n\r\n\r\n\r\n// 导出子类时使用 new 直接进行实例化\r\nexport default new TopicService(TABLE_NAME);"],"sourceRoot":""}