{"version":3,"sources":["webpack:///./src/views/dashboard/forum/CategoryManager.vue?0fed","webpack:///./src/views/dashboard/forum/CategoryManager.vue?39df","webpack:///src/views/dashboard/forum/CategoryManager.vue","webpack:///./src/views/dashboard/forum/CategoryManager.vue?dd02","webpack:///./src/views/dashboard/forum/CategoryManager.vue"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","staticClass","slot","_v","selected","length","on","deleteSelected","resetSelectedLevel","$event","dialog","directives","name","rawName","value","expression","staticStyle","categories","mutilSelectionChange","scopedSlots","_u","key","fn","scope","_s","row","lastEditor","username","_f","updatedAt","editItem","deleteItem","totalCount","pageSize","currentPage","pageSizeChange","currnetPageChange","fullscreen","formTitle","editedIndex","formCols","model","editedItem","callback","$$v","$set","_e","saveItem","staticRenderFns","response","component"],"mappings":"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","file":"js/chunk-ddabedf8.b1c21153.js","sourcesContent":["export * from \"-!../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./CategoryManager.vue?vue&type=style&index=0&lang=css&\"","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('el-card',{attrs:{\"shadow\":\"always\"}},[_c('div',{staticClass:\"horiz-container vertical-center\",attrs:{\"slot\":\"header\"},slot:\"header\"},[_c('span',{staticClass:\"header-text\"},[_vm._v(\"论坛版块管理\")]),_c('el-divider',{staticClass:\"header-text\",attrs:{\"direction\":\"vertical\"}}),_c('el-button',{attrs:{\"type\":\"danger\",\"disabled\":_vm.selected.length <= 0},on:{\"click\":_vm.deleteSelected}},[_vm._v(\"批量删除\")]),_c('el-button',{attrs:{\"type\":\"primary\",\"disabled\":_vm.selected.length <= 0},on:{\"click\":_vm.resetSelectedLevel}},[_vm._v(\"重置选中的排序值\")]),_c('div',{staticClass:\"spacer\"}),_c('el-button',{attrs:{\"size\":\"medium\",\"type\":\"success\"},on:{\"click\":function($event){_vm.dialog = true}}},[_c('i',{staticClass:\"fa fa-plus\"}),_vm._v(\" 添加新版块 \")])],1),_c('el-table',{directives:[{name:\"loading\",rawName:\"v-loading\",value:(_vm.loading),expression:\"loading\"}],staticStyle:{\"width\":\"100%\"},attrs:{\"data\":_vm.categories,\"stripe\":\"\",\"border\":\"\"},on:{\"selection-change\":_vm.mutilSelectionChange}},[_c('el-table-column',{attrs:{\"type\":\"selection\",\"width\":\"35\",\"align\":\"center\"}}),_c('el-table-column',{attrs:{\"prop\":\"title\",\"label\":\"标题\"}}),_c('el-table-column',{attrs:{\"prop\":\"description\",\"label\":\"描述\"}}),_c('el-table-column',{attrs:{\"prop\":\"topicCount\",\"label\":\"主题数量\",\"width\":\"85\"}}),_c('el-table-column',{attrs:{\"prop\":\"level\",\"label\":\"排序值\",\"width\":\"80\"}}),_c('el-table-column',{attrs:{\"label\":\"最后修改\",\"width\":\"180\"},scopedSlots:_vm._u([{key:\"default\",fn:function(scope){return [_c('span',[_vm._v(_vm._s(scope.row.lastEditor.username))]),_c('br'),_c('span',[_vm._v(_vm._s(_vm._f(\"datetimeFormat\")(scope.row.updatedAt)))])]}}])}),_c('el-table-column',{attrs:{\"label\":\"操作\",\"width\":\"100\"},scopedSlots:_vm._u([{key:\"default\",fn:function(scope){return [_c('el-button',{attrs:{\"type\":\"text\",\"size\":\"medium\"},on:{\"click\":function($event){return _vm.editItem(scope.row)}}},[_c('i',{staticClass:\"fa fa-pencil-square-o fa-2x\",staticStyle:{\"color\":\"blue\"}})]),_c('el-button',{attrs:{\"size\":\"medium\",\"type\":\"text\"},on:{\"click\":function($event){return _vm.deleteItem(scope.row)}}},[_c('i',{staticClass:\"fa fa-trash-o fa-2x\",staticStyle:{\"color\":\"red\"}})])]}}])})],1),_c('el-pagination',{attrs:{\"background\":\"\",\"layout\":\"total, sizes, prev, pager, next, jumper\",\"total\":_vm.totalCount,\"page-sizes\":[5, 10, 20, 30],\"page-size\":_vm.pageSize,\"current-page\":_vm.currentPage},on:{\"size-change\":_vm.pageSizeChange,\"current-change\":_vm.currnetPageChange,\"update:pageSize\":function($event){_vm.pageSize=$event},\"update:page-size\":function($event){_vm.pageSize=$event},\"update:currentPage\":function($event){_vm.currentPage=$event},\"update:current-page\":function($event){_vm.currentPage=$event}}})],1),_c('el-dialog',{attrs:{\"visible\":_vm.dialog,\"width\":\"80%\",\"close-on-click-modal\":false,\"fullscreen\":_vm.fullscreen},on:{\"update:visible\":function($event){_vm.dialog=$event}}},[_c('span',{attrs:{\"slot\":\"title\"},slot:\"title\"},[(!_vm.fullscreen)?_c('el-button',{attrs:{\"type\":\"text\"},on:{\"click\":function($event){_vm.fullscreen = true}}},[_c('i',{staticClass:\"fa fa-square-o\",staticStyle:{\"font-size\":\"20px\"},attrs:{\"title\":\"最大化\"}})]):_c('el-button',{attrs:{\"type\":\"text\"},on:{\"click\":function($event){_vm.fullscreen = false}}},[_c('i',{staticClass:\"fa fa-clone\",staticStyle:{\"font-size\":\"20px\"},attrs:{\"title\":\"还原\"}})]),_c('span',{staticClass:\"dialog-title\"},[_vm._v(_vm._s(_vm.formTitle))])],1),_c('el-card',{attrs:{\"shadow\":\"always\"}},[_c('el-form',{attrs:{\"label-position\":\"top\"}},[_c('el-row',{attrs:{\"gutter\":20}},[(_vm.editedIndex !== -1)?_c('el-col',{attrs:{\"md\":24 - _vm.formCols,\"sm\":24}},[_c('el-form-item',{attrs:{\"label\":\"Level\"}},[_c('el-input',{attrs:{\"type\":\"number\",\"controls-position\":\"right\",\"max\":1000,\"label\":\"Level\"},model:{value:(_vm.editedItem.level),callback:function ($$v) {_vm.$set(_vm.editedItem, \"level\", $$v)},expression:\"editedItem.level\"}})],1)],1):_vm._e(),_c('el-col',{attrs:{\"md\":_vm.formCols,\"sm\":24}},[_c('el-form-item',{attrs:{\"label\":\"标题\"}},[_c('el-input',{attrs:{\"placeholder\":\"标题\",\"maxlength\":\"50\",\"show-word-limit\":\"\"},model:{value:(_vm.editedItem.title),callback:function ($$v) {_vm.$set(_vm.editedItem, \"title\", $$v)},expression:\"editedItem.title\"}})],1)],1)],1),_c('el-form-item',{attrs:{\"label\":\"描述(支持 Markdown 语法)\"}},[_c('el-input',{attrs:{\"type\":\"textarea\",\"rows\":_vm.row,\"placeholder\":\"版块描述\"},model:{value:(_vm.editedItem.description),callback:function ($$v) {_vm.$set(_vm.editedItem, \"description\", $$v)},expression:\"editedItem.description\"}})],1)],1)],1),_c('span',{attrs:{\"slot\":\"footer\"},slot:\"footer\"},[_c('el-button',{attrs:{\"type\":\"danger\"},on:{\"click\":function($event){_vm.dialog = false}}},[_vm._v(\"取消\")]),_c('el-button',{attrs:{\"type\":\"primary\"},on:{\"click\":_vm.saveItem}},[_vm._v(\"保存\")])],1)],1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <div>\r\n        <el-card shadow=\"always\">\r\n            <div slot=\"header\" class=\"horiz-container vertical-center\">\r\n                <span class=\"header-text\">论坛版块管理</span>\r\n                <el-divider direction=\"vertical\" class=\"header-text\"></el-divider>\r\n                <el-button\r\n                    type=\"danger\"\r\n                    :disabled=\"selected.length <= 0\"\r\n                    @click=\"deleteSelected\"\r\n                >批量删除</el-button>\r\n                <el-button\r\n                    type=\"primary\"\r\n                    :disabled=\"selected.length <= 0\"\r\n                    @click=\"resetSelectedLevel\"\r\n                >重置选中的排序值</el-button>\r\n                <div class=\"spacer\"></div>\r\n                <el-button size=\"medium\" type=\"success\" @click=\"dialog = true\">\r\n                    <i class=\"fa fa-plus\"></i>\r\n                    添加新版块\r\n                </el-button>\r\n            </div>\r\n\r\n            <el-table\r\n                :data=\"categories\"\r\n                v-loading=\"loading\"\r\n                @selection-change=\"mutilSelectionChange\"\r\n                style=\"width: 100%\"\r\n                stripe\r\n                border\r\n            >\r\n                <el-table-column type=\"selection\" width=\"35\" align=\"center\"></el-table-column>\r\n                <el-table-column prop=\"title\" label=\"标题\"></el-table-column>\r\n                <el-table-column prop=\"description\" label=\"描述\"></el-table-column>\r\n                <el-table-column prop=\"topicCount\" label=\"主题数量\" width=\"85\"></el-table-column>\r\n                <el-table-column prop=\"level\" label=\"排序值\" width=\"80\"></el-table-column>\r\n                <el-table-column label=\"最后修改\" width=\"180\">\r\n                    <template slot-scope=\"scope\">\r\n                        <span>{{ scope.row.lastEditor.username }}</span>\r\n                        <br />\r\n                        <span>{{ scope.row.updatedAt | datetimeFormat }}</span>\r\n                    </template>\r\n                </el-table-column>\r\n                <el-table-column label=\"操作\" width=\"100\">\r\n                    <template slot-scope=\"scope\">\r\n                        <el-button type=\"text\" size=\"medium\" @click=\"editItem(scope.row)\">\r\n                            <i class=\"fa fa-pencil-square-o fa-2x\" style=\"color:blue; \"></i>\r\n                        </el-button>\r\n                        <el-button size=\"medium\" type=\"text\" @click=\"deleteItem(scope.row)\">\r\n                            <i class=\"fa fa-trash-o fa-2x\" style=\"color:red; \"></i>\r\n                        </el-button>\r\n                    </template>\r\n                </el-table-column>\r\n            </el-table>\r\n            <el-pagination\r\n                background\r\n                @size-change=\"pageSizeChange\"\r\n                @current-change=\"currnetPageChange\"\r\n                layout=\"total, sizes, prev, pager, next, jumper\"\r\n                :total=\"totalCount\"\r\n                :page-sizes=\"[5, 10, 20, 30]\"\r\n                :page-size.sync=\"pageSize\"\r\n                :current-page.sync=\"currentPage\"\r\n            ></el-pagination>\r\n        </el-card>\r\n        <!-- 添加和修改版块的对话框  开始 -->\r\n        <el-dialog\r\n            :visible.sync=\"dialog\"\r\n            width=\"80%\"\r\n            :close-on-click-modal=\"false\"\r\n            :fullscreen=\"fullscreen\"\r\n        >\r\n            <span slot=\"title\">\r\n                <el-button type=\"text\" @click=\"fullscreen = true\" v-if=\"!fullscreen\">\r\n                    <i class=\"fa fa-square-o\" style=\"font-size: 20px;\" title=\"最大化\"></i>\r\n                </el-button>\r\n                <el-button type=\"text\" @click=\"fullscreen = false\" v-else>\r\n                    <i class=\"fa fa-clone\" style=\"font-size: 20px;\" title=\"还原\"></i>\r\n                </el-button>\r\n                <span class=\"dialog-title\">{{ formTitle }}</span>\r\n            </span>\r\n            <el-card shadow=\"always\">\r\n                <el-form label-position=\"top\">\r\n                    <el-row :gutter=\"20\">\r\n                        <!-- :gutter=\"20\" 同一行内，两列之间的间隔 -->\r\n                        <el-col :md=\"24 - formCols\" :sm=\"24\" v-if=\"editedIndex !== -1\">\r\n                            <el-form-item label=\"Level\">\r\n                                <el-input\r\n                                    type=\"number\"\r\n                                    v-model=\"editedItem.level\"\r\n                                    controls-position=\"right\"\r\n                                    :max=\"1000\"\r\n                                    label=\"Level\"\r\n                                ></el-input>\r\n                            </el-form-item>\r\n                        </el-col>\r\n\r\n                        <el-col :md=\"formCols\" :sm=\"24\">\r\n                            <el-form-item label=\"标题\">\r\n                                <el-input\r\n                                    v-model=\"editedItem.title\"\r\n                                    placeholder=\"标题\"\r\n                                    maxlength=\"50\"\r\n                                    show-word-limit\r\n                                ></el-input>\r\n                            </el-form-item>\r\n                        </el-col>\r\n                    </el-row>\r\n\r\n                    <el-form-item label=\"描述(支持 Markdown 语法)\">\r\n                        <el-input\r\n                            type=\"textarea\"\r\n                            v-model=\"editedItem.description\"\r\n                            :rows=\"row\"\r\n                            placeholder=\"版块描述\"\r\n                        ></el-input>\r\n                    </el-form-item>\r\n                </el-form>\r\n            </el-card>\r\n            <span slot=\"footer\">\r\n                <el-button type=\"danger\" @click=\"dialog = false\">取消</el-button>\r\n                <el-button type=\"primary\" @click=\"saveItem\">保存</el-button>\r\n            </span>\r\n        </el-dialog>\r\n        <!-- 添加和修改版块的对话框   结束 -->\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n// 使用 @ 开头的路径导入 js 类时， 类的方法没有提示\r\nimport CategoryService from \"../../../api/service/category_service\";\r\nimport moment from 'moment';\r\nexport default {\r\n    name: 'CategoryManager',\r\n    data: () => ({\r\n        categories: [],      // 所有的版块数据\r\n        totalCount: 0,       // 总记录数量\r\n        // totalPage: 1,        // 总页数, el-pagination 有计算页数功能，这个变量可不要\r\n        pageSize: 10,        // 每页大小\r\n        currentPage: 1,      // 当前页\r\n        dialog: false,       // 添加和修改对话框        \r\n        fullscreen: false,   // 添加 修改 对话框 是否全屏\r\n        loading: false,      // 数据表格 显示 正在加载的动画\r\n        selected: [],        //多选框选中的项\r\n        editedIndex: -1,     // 添加 或 修改 的标志；-1表示添加，否则为当前编辑项在 categories 中的索引\r\n        // 添加或修改绑定到对话框上的数据\r\n        editedItem: {\r\n            title: \"\",\r\n            description: \"\",\r\n            level: 0,\r\n        },\r\n        // 用于添加或修改结束后，还原 editedItem 的初始值\r\n        defaultItem: {\r\n            title: \"\",\r\n            description: \"\",\r\n            level: 0,\r\n        },\r\n\r\n    }),\r\n    mounted() {\r\n        this.getCategories();\r\n    },\r\n    methods: {\r\n        // 在函数内调用异步方法时，要使用 async 进行声明\r\n        async getCategories() {\r\n            this.loading = true;  // 显示 \"正在加载\" 的动画\r\n            this.categories = [];\r\n            let skip = this.pageSize * (this.currentPage - 1);\r\n            // 查询总记录数\r\n            this.totalCount = await CategoryService.getTotalCount();\r\n            // this.totalPage = Math.ceil(this.totalCount / this.pageSize);\r\n            // 使用 await 调用异步方法\r\n            let response = await CategoryService\r\n                .fetchAll(this.pageSize, skip, ['createdBy', 'lastEditor'], ['-level', '-createdAt']);\r\n            //  CategoryService.fetchAll() 的参数说明：\r\n            // 1、每页大小；  2、跳过记录数；\r\n            // 3、查询时关联到其他表的字段名，数组类型， 例如：['createdBy', 'lastEditor']\r\n            // 4、降序排列的排序字段名列表，例如：['-level', '-createdAt']， 降序的字段名前面加负号\r\n            // 第三、第四个参数，只有一个字段时也要加： []  \r\n\r\n            console.log(\"result: \", response);\r\n            // 将每一项转为 字典类型， 并重新组成数组\r\n            this.categories = response.map(item => { return this.formJson(item) });\r\n            this.loading = false;  // 停止显示正在加载的动画\r\n        },\r\n\r\n        // 显示编辑对话框\r\n        editItem(item) {\r\n            // 查找 被 编辑项的索引值\r\n            this.editedIndex = this.categories.indexOf(item);\r\n            // Object.assign() 用于将源对象复制到目标对象\r\n            // 因为直接用等号赋值，这两个变量操作的是同一个内存地址\r\n            this.editedItem = Object.assign({}, item);\r\n            this.dialog = true;  // 显示编辑对话框\r\n        },\r\n\r\n        // 保存数据(包含添加和修改两个操作的保存)\r\n        async saveItem() {\r\n            console.log('this.editedIndex:', this.editedIndex);\r\n            if (this.editedIndex === -1) {\r\n                // this.editedIndex === -1 表示当前为添加新项\r\n\r\n\r\n                /**\r\n                 * 向 leancloud 添加数据时，可以不用提前创建表结构，如果没有表，leancloud 会自动创建表\r\n                 * 没有的字段，则会根据上传的 json 数据在表中添加相应的字段\r\n                 * 为防止字段名在多个地方调用时不一致，可以定义为一个模型类用于传递该值，参考见：src/views/dashboard/forum/TopicManager.vue\r\n                 * 以下变量 category 为要添加的的项，\r\n                 * 每个 leancloud 表会包含以下默认字段(不需要写，自动添加的): \r\n                 * ObjectId: 主键字段，实际使用时用 表名.id 来获取值；\r\n                 * createdAt: 创建时间，自动生成，不能修改\r\n                 * updatedAt: 最后修改时间，自动生成，自动修改，不能由用户修改\r\n                 */\r\n                let category = {\r\n                    title: this.editedItem.title.trim(),       // 版块标题， 去掉前后空格\r\n                    description: this.editedItem.description,  // 版块描述\r\n                    level: 0,     // 用于手工排序\r\n                    topicCount: 0,     // 当前版块包含的主题数量\r\n                    createdBy: await CategoryService.currentUser(),   // 版块创建者\r\n                    lastEditor: await CategoryService.currentUser(),  // 最后修改者\r\n                };\r\n\r\n                if (category.title) {\r\n                    // 先检查 要添加的版块 名称 是否已经存在     \r\n                    let exists = await CategoryService.existsFieldValue('title', category.title);\r\n                    if (exists) {\r\n                        // message 消息提示(显示在窗口上方)\r\n                        this.$message({\r\n                            message: `\"${category.title}\" 版块已经存在，不能重复添加`,\r\n                            type: 'error'\r\n                        });\r\n                        // 使用 Notification 通知 显示添加失败的的提示信息(Notification 和 message 二选一)\r\n                        // this.$notify.error({\r\n                        //     title: '添加版块失败',      // 标题\r\n                        //     message: '此版块已经存在，不能重复添加',     // 消息内容\r\n                        //     // offset: 100,        // 偏移量，消息距屏幕边缘偏移一段距离\r\n                        //     showClose: false,      // 不显示关闭按钮，只能等自动关闭\r\n                        // });\r\n                    } else {\r\n                        let response = await CategoryService.create(category);\r\n                        console.log('response:', response);\r\n                        if (response) {\r\n                            this.categories.push(this.formJson(response));\r\n                            // 清空对话框的数据\r\n                            this.editedItem = Object.assign({}, this.defaultItem);\r\n                            this.dialog = false;  // 关闭对话框, 如果不需要自动关闭，把这一行注释掉\r\n                            // 使用 Notification 通知 显示添加失败的的提示信息\r\n                            this.$notify.success({\r\n                                title: '添加成功',      // 标题\r\n                                message: `已经成功添加论坛版块: ${category.title}`,     // 消息内容\r\n                                // offset: 100,        // 偏移量，消息距屏幕边缘偏移一段距离\r\n                                showClose: false,      // 不显示关闭按钮，只能等自动关闭\r\n                            });\r\n                        }\r\n                    }\r\n                } else {\r\n                    this.$message({\r\n                        message: '版块标题不能为空',\r\n                        type: 'warning'\r\n                    });\r\n                }\r\n            } else {\r\n                // this.editedIndex 不等于 -1, 表示当前为修改，其值为被修改项在数组中的索引\r\n                // 编辑版块时，不检查标题是否和其他版块同名，因为可以不改标题，只改其他内容\r\n                // 要完成检查所有项是否相同比较麻烦，所以就不检查了\r\n\r\n                // Object.assign()合并修改后的数据到变量item中，获取在对话框中已修改的内容\r\n                let item = Object.assign(\r\n                    this.categories[this.editedIndex],\r\n                    this.editedItem\r\n                );\r\n\r\n                // updatedAt: 这个是最后修改时间，不能手动修改，是由leancloud 自动完成修改的\r\n                let response = await CategoryService.update(item.id, {\r\n                    title: item.title,              // 修改后的标题\r\n                    description: item.description,  // 修改后的描述\r\n                    level: Number(item.level),      // 修改后的level， 要转为数字类型\r\n                    lastEditor: await CategoryService.currentUser(), // 最后修改者\r\n                });\r\n\r\n                if (response) {\r\n                    // 更新 当前数据中的 最后修改时间（updatedAt)\r\n                    this.categories[this.editedIndex].updatedAt = moment(response.updatedAt).format(\"lll\");\r\n                    // 将结果按照 level 重新排序\r\n                    this.categories.sort((a, b) => {\r\n                        return b.level - a.level;\r\n                    });\r\n                    this.dialog = false;   // 关闭对话框\r\n                    this.$message({\r\n                        message: '论坛版块编辑成功',\r\n                        type: 'success'\r\n                    });\r\n                } else {\r\n                    this.$message({\r\n                        message: '出现错误, 无法完成论坛版块修改',\r\n                        type: 'error'\r\n                    });\r\n                }\r\n            }\r\n        },\r\n\r\n        // 删除记录\r\n        deleteItem(item) {\r\n            // 在数组中查找删除对象的索引\r\n            this.editedIndex = this.categories.indexOf(item);\r\n            this.editedItem = Object.assign({}, item);  // 复制要删除的对象\r\n            // this.deleteItemConfirm = `确定要删除名为：\"${item.title}\" 的版块吗？`;\r\n            // 显示删除确认对话框\r\n            this.$confirm(`确定要删除名为：\"${item.title}\" 的版块吗？`, '删除版块', {\r\n                confirmButtonText: '确定',\r\n                cancelButtonText: '取消',\r\n                type: 'warning'\r\n            }).then(async () => {\r\n                // .then()  里面的匿名函数前要加  async \r\n                // 在服务器端执行删除操作\r\n                let response = await CategoryService.delete(item.id);\r\n                if (response) {\r\n                    // 从当前显示 的数据中删除对应的项\r\n                    this.categories.splice(this.editedIndex, 1)[0];\r\n                    this.$message({\r\n                        type: 'success',\r\n                        message: '删除成功!'\r\n                    });\r\n                }\r\n            }).catch(() => {\r\n                this.$message({\r\n                    type: 'info',\r\n                    message: '已取消删除'\r\n                });\r\n            });\r\n\r\n        },\r\n\r\n        // 用于在表格中选中多行的函数\r\n        mutilSelectionChange(val) {\r\n            this.selected = val;   // 保存选中的行\r\n            console.log(this.selected);\r\n        },\r\n\r\n        // 批量删除已选中的多行\r\n        deleteSelected() {\r\n            // 显示删除确认对话框\r\n            this.$confirm(`确定要删除已选中的 ${this.selected.length} 个版块吗？`, '批量删除版块', {\r\n                confirmButtonText: '确定',\r\n                cancelButtonText: '取消',\r\n                type: 'warning'\r\n            }).then(async () => {     // .then()  里面的匿名函数前要加  async \r\n                // 在服务器端执行删除操作\r\n                let response = await CategoryService.deleteBatch(this.selected);\r\n                if (response) {\r\n                    this.getCategories();  // 重新载入数据 \r\n                    this.selected = [];  // 重置变量\r\n                    this.$message({\r\n                        type: 'success',\r\n                        message: '删除成功!'\r\n                    });\r\n\r\n                }\r\n            }).catch(() => {\r\n                this.$message({\r\n                    type: 'info',\r\n                    message: '已取消删除'\r\n                });\r\n            });\r\n        },\r\n\r\n        // 重置选中的多个level 值为 0， 批量修改的应用\r\n        resetSelectedLevel() {\r\n            // 显示删除确认对话框\r\n            this.$confirm(`确定要重置已选中的 ${this.selected.length} 个版块的 Level 值为 0 吗？`, '重置Level值', {\r\n                confirmButtonText: '确定',\r\n                cancelButtonText: '取消',\r\n                type: 'warning'\r\n            }).then(async () => {     // .then()  里面的匿名函数前要加  async \r\n\r\n                // 修改所有选中项的 level 值\r\n                this.selected.map(async item => {\r\n                    console.log('item: ', item)\r\n                    item.level = 0           // 修改所有选中行的 level 值 \r\n                    delete item.createdAt;   // 删除只能由服务器端自动修改的字段\r\n                    delete item.updatedAt;   // 删除只能由服务器端自动修改的字段                    \r\n                    delete item.createdBy;   // 删除 创建者\r\n\r\n                    item.lastEditor = await CategoryService.currentUser();  //  最后的修改者\r\n                    return item;\r\n                });\r\n\r\n                // 将包含已修改值之后的所有项传到服务器端执行批量修改操作\r\n                let response = await CategoryService.updateBatch(this.selected);\r\n                if (response) {\r\n                    this.getCategories();  // 重新载入数据 \r\n                    this.selected = [];  // 重置变量\r\n                    this.$message({\r\n                        type: 'success',\r\n                        message: '重置成功!'\r\n                    });\r\n                }\r\n            }).catch(() => {\r\n                this.$message({\r\n                    type: 'info',\r\n                    message: '已取消重置操作'\r\n                });\r\n            });\r\n        },\r\n\r\n        // 关闭添加或修改的对话框，并还原对话框数据为初始值\r\n        closeDialog() {\r\n            this.dialog = false;\r\n            this.fullscreen = false;   \r\n            // this.$nextTick()将回调延迟到下次 DOM 更新循环之后执行\r\n            this.$nextTick(() => {\r\n                this.editedItem = Object.assign({}, this.defaultItem);\r\n                this.editedIndex = -1;\r\n            });\r\n        },\r\n\r\n        // 修改每页大小时的方法\r\n        pageSizeChange(val) {\r\n            // 如果使用 带 .sync 修饰符的绑定，如：  :page-size.sync=\"pageSize\" \r\n            // 则不需要用下一行的方式给 页大小赋值\r\n            // this.pageSize = val;  \r\n            this.getCategories();\r\n        },\r\n\r\n        // 修改当前页时的方法\r\n        currnetPageChange(val) {\r\n            // 如果使用 带 .sync 修饰符的绑定，如：  :current-page.sync=\"currentPage\"\r\n            // 则不需要用下一行的方式给 页大小赋值\r\n            // this.currentPage = val;\r\n            this.getCategories();\r\n\r\n        },\r\n\r\n        // 获取用户表中各个字段的值\r\n        getUser(user) {\r\n            // console.log(user);\r\n            return {\r\n                id: user.id,\r\n                username: user.get(\"username\"),\r\n                email: user.get(\"email\"),\r\n            };\r\n        },\r\n\r\n        // 将从服务器获取的一个数据项转为对象格式的数据\r\n        formJson(item) {\r\n            return {\r\n                id: item.id,   // leancloud Class 自带属性，对应 leanclud Class 中的 \"ObjectId\", 可以用\".id\"直接引用\r\n                title: item.get(\"title\"),  // title 为自定义的属性名，要使用 get() 来取值 \r\n                description: item.get(\"description\"),\r\n                level: item.get(\"level\"),\r\n                topicCount: item.get(\"topicCount\"),\r\n                createdAt: item.createdAt,   // leancloud Class 自带属性,创建时间,不能修改值\r\n                updatedAt: item.updatedAt,   // leancloud Class 自带属性,最后修改时间,只能leancloud 自动修改\r\n\r\n                /**\r\n                 * createdBy、lastEditor 指向另一个表的字段, 默认只能得到该字段在关联表中的id 值\r\n                 * 要得到完整值， 查询时字段名要包含在 include 中，\r\n                 * 取值时，要先判断是否为空，如果为空，取值会抛出异常，\r\n                 */\r\n                createdBy: item.get(\"createdBy\")\r\n                    ? this.getUser(item.get(\"createdBy\"))\r\n                    : \"\",\r\n                lastEditor: item.get(\"lastEditor\")\r\n                    ? this.getUser(item.get(\"lastEditor\"))\r\n                    : \"\",\r\n            };\r\n        },\r\n\r\n\r\n\r\n    },\r\n\r\n    // 计算属性\r\n    computed: {\r\n        // 添加或修改对话框的标题\r\n        formTitle() {\r\n            return this.editedIndex === -1 ? \"添加新版块\" : \"版块编辑\";\r\n        },\r\n\r\n        // 添加或修改对话框中 标题 文本框的宽度\r\n        formCols() {\r\n            // 添加时不用显示 Level，Title 宽度为 24\r\n            // 修改时需要显示 Level，Title 宽度为 21\r\n            return this.editedIndex === -1 ? 24 : 21;\r\n        },\r\n\r\n        // 多行文本框的行数\r\n        row() {\r\n            // 全屏状态时多行文本框 15 行，非全屏时 5行\r\n            return this.fullscreen ? 15 : 5;\r\n        }\r\n    },\r\n\r\n    // 过滤器\r\n    filters: {\r\n        // 使用 moment.js 定义日期时间过滤器函数\r\n        datetimeFormat(val) {\r\n            return moment(val).format(\"lll\");\r\n        },\r\n    },\r\n\r\n    // 观察属性， 函数名为变量名，当该变量值有变化时，触发函数\r\n    watch: {\r\n        // 监控变量 dialog, 当对话框关闭时，还原对话框相关的初始值 \r\n        dialog(val) {\r\n            // 相当于 if 语句的简化写法\r\n            val || this.closeDialog();\r\n        },\r\n    }\r\n\r\n\r\n}\r\n</script>\r\n\r\n<style>\r\n.header-text {\r\n    font-size: 24px;\r\n}\r\n\r\n.dialog-title {\r\n    margin-left: 12px;\r\n    font-size: 24px;\r\n}\r\n\r\n/* 分页组件靠右对齐 */\r\n.el-pagination {\r\n    text-align: right;\r\n}\r\n</style>","import mod from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js!../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./CategoryManager.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js!../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./CategoryManager.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./CategoryManager.vue?vue&type=template&id=98ebf1f2&\"\nimport script from \"./CategoryManager.vue?vue&type=script&lang=js&\"\nexport * from \"./CategoryManager.vue?vue&type=script&lang=js&\"\nimport style0 from \"./CategoryManager.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}