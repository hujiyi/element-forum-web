{"version":3,"sources":["webpack:///./src/views/dashboard/forum/TopicManager.vue?2f5a","webpack:///src/views/dashboard/forum/TopicManager.vue","webpack:///./src/views/dashboard/forum/TopicManager.vue?e4c0","webpack:///./src/views/dashboard/forum/TopicManager.vue","webpack:///./node_modules/@babel/runtime/helpers/esm/typeof.js","webpack:///./src/api/service/topic_service.js","webpack:///./src/model/topic.js","webpack:///./src/views/dashboard/forum/TopicManager.vue?dc56"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","staticClass","slot","_v","selected","length","on","deleteSelected","resetSelectedLevel","createItem","directives","name","rawName","value","expression","staticStyle","topices","mutilSelectionChange","scopedSlots","_u","key","fn","scope","_s","row","views","reply","createdBy","username","_f","createdAt","lastEditor","updatedAt","$event","editItem","deleteItem","totalCount","pageSize","currentPage","pageSizeChange","currnetPageChange","dialog","fullscreen","formTitle","editedIndex","formCols","model","editedItem","callback","$$v","$set","_e","currCategory","_l","item","label","saveItem","staticRenderFns","category","set","get","topic","title","content","response","component","_typeof","obj","Symbol","iterator","constructor","prototype","TABLE_NAME","TopicService","table_name","BaseService","getTopicByCategory","id","limit","skip","sort_field","query","LC","Query","board","Object","createWithoutData","include","equalTo","descending","isMinus","console","log","substr","addDescending","addAscending","select","count","total","find","code","Topic","level","getCategory","getUser","user","email","formJson"],"mappings":"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","file":"js/chunk-dae2cb1c.00883108.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('el-card',{attrs:{\"shadow\":\"always\"}},[_c('div',{staticClass:\"horiz-container vertical-center\",attrs:{\"slot\":\"header\"},slot:\"header\"},[_c('span',{staticClass:\"header-text\"},[_vm._v(\"论坛话题管理\")]),_c('el-divider',{staticClass:\"header-text\",attrs:{\"direction\":\"vertical\"}}),_c('el-button',{attrs:{\"type\":\"danger\",\"disabled\":_vm.selected.length <= 0},on:{\"click\":_vm.deleteSelected}},[_vm._v(\"批量删除\")]),_c('el-button',{attrs:{\"type\":\"primary\",\"disabled\":_vm.selected.length <= 0},on:{\"click\":_vm.resetSelectedLevel}},[_vm._v(\"重置选中的排序值\")]),_c('div',{staticClass:\"spacer\"}),_c('el-button',{attrs:{\"size\":\"medium\",\"type\":\"success\"},on:{\"click\":_vm.createItem}},[_c('i',{staticClass:\"fa fa-plus\"}),_vm._v(\" 添加新话题 \")])],1),_c('el-table',{directives:[{name:\"loading\",rawName:\"v-loading\",value:(_vm.loading),expression:\"loading\"}],staticStyle:{\"width\":\"100%\"},attrs:{\"data\":_vm.topices,\"stripe\":\"\",\"border\":\"\"},on:{\"selection-change\":_vm.mutilSelectionChange}},[_c('el-table-column',{attrs:{\"type\":\"selection\",\"width\":\"35\",\"align\":\"center\"}}),_c('el-table-column',{attrs:{\"prop\":\"category.label\",\"label\":\"版块\"}}),_c('el-table-column',{attrs:{\"prop\":\"title\",\"label\":\"话题\"}}),_c('el-table-column',{attrs:{\"prop\":\"level\",\"label\":\"置顶值\",\"width\":\"70\"}}),_c('el-table-column',{attrs:{\"label\":\"查看/评论\",\"width\":\"100\",\"align\":\"center\"},scopedSlots:_vm._u([{key:\"default\",fn:function(scope){return [_c('span',[_vm._v(_vm._s(scope.row.views))]),_vm._v(\" / \"),_c('span',[_vm._v(_vm._s(scope.row.reply))])]}}])}),_c('el-table-column',{attrs:{\"label\":\"作者\",\"width\":\"160\"},scopedSlots:_vm._u([{key:\"default\",fn:function(scope){return [_c('span',[_vm._v(_vm._s(scope.row.createdBy.username))]),_c('br'),_c('span',[_vm._v(_vm._s(_vm._f(\"datetimeFormat\")(scope.row.createdAt)))])]}}])}),_c('el-table-column',{attrs:{\"label\":\"最后修改\",\"width\":\"160\"},scopedSlots:_vm._u([{key:\"default\",fn:function(scope){return [_c('span',[_vm._v(_vm._s(scope.row.lastEditor.username))]),_c('br'),_c('span',[_vm._v(_vm._s(_vm._f(\"datetimeFormat\")(scope.row.updatedAt)))])]}}])}),_c('el-table-column',{attrs:{\"label\":\"操作\",\"width\":\"100\"},scopedSlots:_vm._u([{key:\"default\",fn:function(scope){return [_c('el-button',{attrs:{\"type\":\"text\",\"size\":\"medium\",\"title\":\"编辑\"},on:{\"click\":function($event){return _vm.editItem(scope.row)}}},[_c('i',{staticClass:\"fa fa-pencil-square-o fa-lg\",staticStyle:{\"color\":\"blue\"}})]),_c('el-button',{attrs:{\"size\":\"medium\",\"type\":\"text\",\"title\":\"删除\"},on:{\"click\":function($event){return _vm.deleteItem(scope.row)}}},[_c('i',{staticClass:\"fa fa-trash-o fa-lg\",staticStyle:{\"color\":\"red\"}})])]}}])})],1),_c('el-pagination',{attrs:{\"background\":\"\",\"layout\":\"total, sizes, prev, pager, next, jumper\",\"total\":_vm.totalCount,\"page-sizes\":[5, 10, 20, 30],\"page-size\":_vm.pageSize,\"current-page\":_vm.currentPage},on:{\"size-change\":_vm.pageSizeChange,\"current-change\":_vm.currnetPageChange,\"update:pageSize\":function($event){_vm.pageSize=$event},\"update:page-size\":function($event){_vm.pageSize=$event},\"update:currentPage\":function($event){_vm.currentPage=$event},\"update:current-page\":function($event){_vm.currentPage=$event}}})],1),_c('el-dialog',{attrs:{\"visible\":_vm.dialog,\"width\":\"80%\",\"close-on-click-modal\":false,\"fullscreen\":_vm.fullscreen},on:{\"update:visible\":function($event){_vm.dialog=$event}}},[_c('span',{attrs:{\"slot\":\"title\"},slot:\"title\"},[(!_vm.fullscreen)?_c('el-button',{attrs:{\"type\":\"text\"},on:{\"click\":function($event){_vm.fullscreen = true}}},[_c('i',{staticClass:\"fa fa-square-o\",staticStyle:{\"font-size\":\"20px\"},attrs:{\"title\":\"最大化\"}})]):_c('el-button',{attrs:{\"type\":\"text\"},on:{\"click\":function($event){_vm.fullscreen = false}}},[_c('i',{staticClass:\"fa fa-clone\",staticStyle:{\"font-size\":\"20px\"},attrs:{\"title\":\"还原\"}})]),_c('span',{staticClass:\"dialog-title\"},[_vm._v(_vm._s(_vm.formTitle))])],1),_c('el-card',{attrs:{\"shadow\":\"always\"}},[_c('el-form',{attrs:{\"label-position\":\"top\"}},[_c('el-row',{attrs:{\"gutter\":20}},[(_vm.editedIndex !== -1)?_c('el-col',{attrs:{\"md\":24 - _vm.formCols,\"sm\":24}},[_c('el-form-item',{attrs:{\"label\":\"置顶值\"}},[_c('el-input',{attrs:{\"type\":\"number\",\"controls-position\":\"right\",\"max\":1000,\"label\":\"Level\"},model:{value:(_vm.editedItem.level),callback:function ($$v) {_vm.$set(_vm.editedItem, \"level\", $$v)},expression:\"editedItem.level\"}})],1)],1):_vm._e(),_c('el-col',{attrs:{\"md\":_vm.formCols,\"sm\":24}},[_c('el-form-item',{attrs:{\"label\":\"所属版块\"}},[_c('el-select',{staticStyle:{\"width\":\"100%\"},attrs:{\"placeholder\":\"请选择版块名称\"},model:{value:(_vm.currCategory),callback:function ($$v) {_vm.currCategory=$$v},expression:\"currCategory\"}},_vm._l((_vm.categorySelectItems),function(item){return _c('el-option',{key:item.value,attrs:{\"label\":item.label,\"value\":item.value}})}),1)],1)],1)],1),_c('el-form-item',{attrs:{\"label\":\"标题\"}},[_c('el-input',{attrs:{\"placeholder\":\"标题\",\"maxlength\":\"50\",\"show-word-limit\":\"\"},model:{value:(_vm.editedItem.title),callback:function ($$v) {_vm.$set(_vm.editedItem, \"title\", $$v)},expression:\"editedItem.title\"}})],1),_c('el-form-item',{attrs:{\"label\":\"话题内容(支持 Markdown 语法)\"}},[_c('el-input',{attrs:{\"type\":\"textarea\",\"rows\":_vm.row,\"placeholder\":\"话题内容\"},model:{value:(_vm.editedItem.content),callback:function ($$v) {_vm.$set(_vm.editedItem, \"content\", $$v)},expression:\"editedItem.content\"}})],1)],1)],1),_c('span',{attrs:{\"slot\":\"footer\"},slot:\"footer\"},[_c('el-button',{attrs:{\"type\":\"danger\"},on:{\"click\":function($event){_vm.dialog = false}}},[_vm._v(\"取消\")]),_c('el-button',{attrs:{\"type\":\"primary\"},on:{\"click\":_vm.saveItem}},[_vm._v(\"保存\")])],1)],1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <div>\r\n        <el-card shadow=\"always\">\r\n            <div slot=\"header\" class=\"horiz-container vertical-center\">\r\n                <span class=\"header-text\">论坛话题管理</span>\r\n                <el-divider direction=\"vertical\" class=\"header-text\"></el-divider>\r\n                <el-button\r\n                    type=\"danger\"\r\n                    :disabled=\"selected.length <= 0\"\r\n                    @click=\"deleteSelected\"\r\n                >批量删除</el-button>\r\n                <el-button\r\n                    type=\"primary\"\r\n                    :disabled=\"selected.length <= 0\"\r\n                    @click=\"resetSelectedLevel\"\r\n                >重置选中的排序值</el-button>\r\n                <div class=\"spacer\"></div>\r\n                <el-button size=\"medium\" type=\"success\" @click=\"createItem\">\r\n                    <i class=\"fa fa-plus\"></i>\r\n                    添加新话题\r\n                </el-button>\r\n            </div>\r\n            <el-table\r\n                :data=\"topices\"\r\n                v-loading=\"loading\"\r\n                @selection-change=\"mutilSelectionChange\"\r\n                style=\"width: 100%\"\r\n                stripe\r\n                border\r\n            >\r\n                <el-table-column type=\"selection\" width=\"35\" align=\"center\"></el-table-column>\r\n                <el-table-column prop=\"category.label\" label=\"版块\"></el-table-column>\r\n                <el-table-column prop=\"title\" label=\"话题\"></el-table-column>\r\n                <el-table-column prop=\"level\" label=\"置顶值\" width=\"70\"></el-table-column>\r\n                <el-table-column label=\"查看/评论\" width=\"100\" align=\"center\">\r\n                    <template slot-scope=\"scope\">\r\n                        <span>{{ scope.row.views }}</span>\r\n                        /\r\n                        <span>{{ scope.row.reply }}</span>\r\n                    </template>\r\n                </el-table-column>\r\n                <el-table-column label=\"作者\" width=\"160\">\r\n                    <template slot-scope=\"scope\">\r\n                        <span>{{ scope.row.createdBy.username }}</span>\r\n                        <br />\r\n                        <span>{{ scope.row.createdAt | datetimeFormat }}</span>\r\n                    </template>\r\n                </el-table-column>\r\n                <el-table-column label=\"最后修改\" width=\"160\">\r\n                    <template slot-scope=\"scope\">\r\n                        <span>{{ scope.row.lastEditor.username }}</span>\r\n                        <br />\r\n                        <span>{{ scope.row.updatedAt | datetimeFormat }}</span>\r\n                    </template>\r\n                </el-table-column>\r\n                <el-table-column label=\"操作\" width=\"100\">\r\n                    <template slot-scope=\"scope\">\r\n                        <el-button\r\n                            type=\"text\"\r\n                            size=\"medium\"\r\n                            title=\"编辑\"\r\n                            @click=\"editItem(scope.row)\"\r\n                        >\r\n                            <i class=\"fa fa-pencil-square-o fa-lg\" style=\"color:blue; \"></i>\r\n                        </el-button>\r\n                        <el-button\r\n                            size=\"medium\"\r\n                            type=\"text\"\r\n                            title=\"删除\"\r\n                            @click=\"deleteItem(scope.row)\"\r\n                        >\r\n                            <i class=\"fa fa-trash-o fa-lg\" style=\"color:red; \"></i>\r\n                        </el-button>\r\n                    </template>\r\n                </el-table-column>\r\n            </el-table>\r\n            <el-pagination\r\n                background\r\n                @size-change=\"pageSizeChange\"\r\n                @current-change=\"currnetPageChange\"\r\n                layout=\"total, sizes, prev, pager, next, jumper\"\r\n                :total=\"totalCount\"\r\n                :page-sizes=\"[5, 10, 20, 30]\"\r\n                :page-size.sync=\"pageSize\"\r\n                :current-page.sync=\"currentPage\"\r\n            ></el-pagination>\r\n        </el-card>\r\n\r\n        <!-- 添加和修改版块的对话框  开始 -->\r\n        <el-dialog\r\n            :visible.sync=\"dialog\"\r\n            width=\"80%\"\r\n            :close-on-click-modal=\"false\"\r\n            :fullscreen=\"fullscreen\"\r\n        >\r\n            <span slot=\"title\">\r\n                <el-button type=\"text\" @click=\"fullscreen = true\" v-if=\"!fullscreen\">\r\n                    <i class=\"fa fa-square-o\" style=\"font-size: 20px;\" title=\"最大化\"></i>\r\n                </el-button>\r\n                <el-button type=\"text\" @click=\"fullscreen = false\" v-else>\r\n                    <i class=\"fa fa-clone\" style=\"font-size: 20px;\" title=\"还原\"></i>\r\n                </el-button>\r\n                <span class=\"dialog-title\">{{ formTitle }}</span>\r\n            </span>\r\n            <el-card shadow=\"always\">\r\n                <el-form label-position=\"top\">\r\n                    <el-row :gutter=\"20\">\r\n                        <!-- :gutter=\"20\" 同一行内，两列之间的间隔 -->\r\n                        <el-col :md=\"24 - formCols\" :sm=\"24\" v-if=\"editedIndex !== -1\">\r\n                            <el-form-item label=\"置顶值\">\r\n                                <el-input\r\n                                    type=\"number\"\r\n                                    v-model=\"editedItem.level\"\r\n                                    controls-position=\"right\"\r\n                                    :max=\"1000\"\r\n                                    label=\"Level\"\r\n                                ></el-input>\r\n                            </el-form-item>\r\n                        </el-col>\r\n\r\n                        <el-col :md=\"formCols\" :sm=\"24\">\r\n                            <el-form-item label=\"所属版块\">\r\n                                <el-select\r\n                                    v-model=\"currCategory\"\r\n                                    placeholder=\"请选择版块名称\"\r\n                                    style=\"width:100%;\"\r\n                                >\r\n                                    <el-option\r\n                                        v-for=\"item in categorySelectItems\"\r\n                                        :key=\"item.value\"\r\n                                        :label=\"item.label\"\r\n                                        :value=\"item.value\"\r\n                                    ></el-option>\r\n                                </el-select>\r\n                            </el-form-item>\r\n                        </el-col>\r\n                    </el-row>\r\n\r\n                    <el-form-item label=\"标题\">\r\n                        <el-input\r\n                            v-model=\"editedItem.title\"\r\n                            placeholder=\"标题\"\r\n                            maxlength=\"50\"\r\n                            show-word-limit\r\n                        ></el-input>\r\n                    </el-form-item>\r\n\r\n                    <el-form-item label=\"话题内容(支持 Markdown 语法)\">\r\n                        <el-input\r\n                            type=\"textarea\"\r\n                            v-model=\"editedItem.content\"\r\n                            :rows=\"row\"\r\n                            placeholder=\"话题内容\"\r\n                        ></el-input>\r\n                    </el-form-item>\r\n                </el-form>\r\n            </el-card>\r\n            <span slot=\"footer\">\r\n                <el-button type=\"danger\" @click=\"dialog = false\">取消</el-button>\r\n                <el-button type=\"primary\" @click=\"saveItem\">保存</el-button>\r\n            </span>\r\n        </el-dialog>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport CategoryService from \"../../../api/service/category_service\";\r\nimport TopicService from '../../../api/service/topic_service';\r\nimport Topic from '../../../model/topic';\r\nexport default {\r\n    name: 'TopicManager',\r\n    data: () => ({\r\n        categorySelectItems: [],  // 版块下拉框的数据\r\n        currCategory: '',    // 下拉框选中的当前版块\r\n        categories: [],      // 所有版块的原始数据\r\n        topices: [],         // 所有的版块数据\r\n        totalCount: 0,       // 总记录数量\r\n        totalPage: 1,        // 总页数\r\n        pageSize: 10,        // 每页大小\r\n        currentPage: 1,      // 当前页\r\n        dialog: false,       // 添加和修改对话框       \r\n        fullscreen: false,   // 添加 修改 对话框 是否全屏\r\n        loading: false,      // 数据表格 显示 正在加载的动画\r\n        selected: [],        //多选框选中的项\r\n        editedIndex: -1,     // 添加 或 修改 的标志；-1表示添加，否则为当前编辑项在 categories 中的索引\r\n        // 添加或修改绑定到对话框上的数据\r\n        editedItem: {\r\n            category: {},   // 话题所属版块\r\n            title: \"\",      // 话题的标题\r\n            content: \"\",    // 话题的内容\r\n            level: 0,       // 手动排序值\r\n        },\r\n        // 用于添加或修改结束后，还原 editedItem 的初始值       \r\n        defaultItem: {\r\n            category: {},\r\n            title: \"\",\r\n            content: \"\",\r\n            level: 0,\r\n        },\r\n    }),\r\n    mounted() {\r\n        this.getTopics();\r\n    },\r\n    methods: {\r\n        // 获取分类\r\n        async getCategories() {\r\n            this.categories = [];\r\n            this.categorySelectItems = [];\r\n            // 此处假设版块总数不大于1000\r\n            let response = await CategoryService.fetchAll(1000, 0, [], ['-level', '-createdAt']);\r\n            if (response.status_code === \"ok\") {\r\n                this.categorySelectItems = response.reslut.map(item => {\r\n                    return {\r\n                        label: item.get('title'),\r\n                        value: item.id,\r\n                    }\r\n                });\r\n\r\n                // 保留原始的 版块数据 用于添加话题时 获取相应的版块\r\n                this.categories = response.reslut;\r\n            }\r\n\r\n\r\n\r\n        },\r\n        // 获取话题数据\r\n        async getTopics() {\r\n            this.loading = true;\r\n\r\n            this.topices = [];\r\n            let skip = this.pageSize * (this.currentPage - 1);\r\n            let response = await TopicService.fetchAll(this.pageSize, skip, [\"category\", \"createdBy\", \"lastEditor\"], ['-level', '-updatedAt'],);\r\n            // 数据查询成功后再查询总记录数(注意，因为是分两步完成，所以总数可能会不对)\r\n            if (response.status_code === \"ok\") {\r\n                this.totalCount = response.totalCount;\r\n                this.topices = response.reslut.map(item => { return new Topic().formJson(item) });\r\n            }\r\n            // 直接调用用模型类 (src/model/topic.js) 的方法处理数据：new Topic().formJson(item)\r\n\r\n\r\n            this.loading = false;\r\n        },\r\n\r\n        // 因为要获取最新的版块列表，所以通过函数打开添加对话框\r\n        async createItem() {\r\n            await this.getCategories();  // 获取最新版块列表\r\n\r\n            /**\r\n             * 设置下拉框的默认值为第一个\r\n             * 下拉框默认值, 设置下拉框默认值要使用 value，\r\n             * 否则没有改变过的下拉框结果可能会是 Object 类型\r\n             */\r\n            this.currCategory = this.categorySelectItems[0].value;\r\n            this.dialog = true;   // 打开添加对话框\r\n        },\r\n\r\n        // 显示修改对话框\r\n        async editItem(item) {\r\n            // 查找 被 编辑项的索引值\r\n            this.editedIndex = this.topices.indexOf(item);\r\n            // Object.assign() 用于将源对象复制到目标对象\r\n            // 因为直接用等号赋值，这两个变量操作的是同一个内存地址\r\n            this.editedItem = Object.assign({}, item);\r\n            await this.getCategories();  // 获取最新版块列表\r\n\r\n            // 下拉框默认值, 设置下拉框默认值要使用 value， \r\n            // 否则没有改变过的下拉框结果可能会是 Object 类型\r\n            this.currCategory = this.editedItem.category.value;\r\n            this.dialog = true;  // 显示编辑对话框\r\n        },\r\n\r\n        // 添加或修改时保存数据\r\n        async saveItem() {\r\n            console.log('this.editedIndex：', this.editedIndex);\r\n\r\n            // 下拉框有 change时 版块下拉框值的类型为String，\r\n            // 下拉框没有 change时 ，版块下拉框值的类型为Object，\r\n            console.log('选中的版块：', typeof this.currCategory, this.currCategory);\r\n\r\n            if (this.editedIndex === -1) {\r\n                /**\r\n                * 这里是添加新话题时执行的代码\r\n                */\r\n\r\n\r\n                /**\r\n                 * 从 版块的 原始数据中 找出匹配的项\r\n                 * 原始数据的每一项是一个 leancloud Class\r\n                 * 把这个 leancloud Class 当成 topic 的一个值保存, 就会自动关联到 对应的另一个 leancloud Class\r\n                 * category 必须是一个 leancloud Class 类型\r\n                 * leancloud Class 类型获得的两种办法：\r\n                 * 1、使用leancloud 的 Query 方法创建， 例如：let category = new LC.Query(\"Category\");\r\n                 * 2、从查询结果的原始数据中获得（这里用的是这一种） \r\n                 */\r\n                let category = this.categories.find(item => { return item.id === this.currCategory });\r\n\r\n                // 原始的  leancloud Class 数据不能直接赋值，要使用 set() 方法\r\n                category.set('topicCount', category.get('topicCount') + 1);  // 版块中话题数量 加1, \r\n\r\n                // 新添加的话题， 第一方法：直接构造要添加的数据 \r\n                // let topic = {\r\n                //     category: category,                // 用于关联到 版块 的字段\r\n                //     title: this.editedItem.title,      // 话题的标题\r\n                //     content: this.editedItem.content,  // 话题的内容\r\n                //     views: 0,       // 查看次数                    \r\n                //     reply: 0,       // 评论数\r\n                //     level: 0,       // 用于手工排序的字段， 显示时，数字大的在前面\r\n                //     createdBy: await TopicService.currentUser(),     // 创建者\r\n                //     lastEditor: await TopicService.currentUser(),    // 最后修改者 \r\n                // }\r\n\r\n\r\n                /**\r\n                 * 新添加的话题，第二种方法：通过 模型类 (src/model/topic.js) 创建要添加的数据\r\n                 * 构造函数中的默认值不用再次赋值\r\n                 * 构造函数没有的字段可以直接添加（动态语言的好处）\r\n                 */\r\n                let topic = new Topic();\r\n                topic.category = category;\r\n                topic.title = this.editedItem.title;\r\n                topic.content = this.editedItem.content;\r\n                topic.createdBy = await TopicService.currentUser();\r\n                topic.lastEditor = await TopicService.currentUser();\r\n\r\n                let response = await TopicService.create(topic);   // 添加一个话题\r\n                if (response) {\r\n                    this.getTopics();  // 更新数据, 因为需要 level 值大的项排前面，所以重新加载数据最简便\r\n                    // 修改 相应 版块的  topicCount 值 \r\n                    await CategoryService.update(category.id, { topicCount: category.topicCount, });\r\n                    this.$message({\r\n                        message: '成功添加一个新的话题',\r\n                        type: 'success'\r\n                    });\r\n\r\n                    this.dialog = false;  // 关闭对话框\r\n                } else {\r\n                    this.$message({\r\n                        message: '出现错误, 无法添加新话题修改',\r\n                        type: 'error'\r\n                    });\r\n                }\r\n            } else {\r\n                /**\r\n                 * 这里是修改时调用的代码\r\n                 */\r\n                let category = this.categories.find(item => { return item.id === this.currCategory });\r\n\r\n                // 使用 Object.assign() 合并获得修改后的数据到变量 item 中，获取在对话框中已修改的内容\r\n                let item = Object.assign(\r\n                    this.topices[this.editedIndex],\r\n                    this.editedItem\r\n                );\r\n                // 修改时，只包含有变化值的字段名\r\n                let topic = {\r\n                    /**\r\n                     * 这里有一个bug, 之前每次添加一个话题时，对应版块的 topicCount +1\r\n                     * 如果话题所属的版块也修改了，应该把所属旧版块的  topicCount -1 ，所属新版块的  topicCount -1\r\n                     * 我不想费脑子了，所以这个有待需要的人自己去实现\r\n                     */\r\n                    category: category,                    // 所属类别\r\n                    title: item.title,          // 话题的标题\r\n                    content: item.content,      // 话题的内容                    \r\n                    level: Number(item.level),  // 用于手工排序的字段， 显示时，数字大的在前面                  \r\n                    lastEditor: await TopicService.currentUser(),    // 最后修改者 \r\n                }\r\n\r\n                let response = await TopicService.update(item.id, topic);\r\n                if (response) {\r\n                    // 更新 当前数据 方法一： 想省事用这个就可以了\r\n                    //  this.getTopics();\r\n\r\n\r\n                    // 更新 当前数据方法二： 考虑到有些网络差，或是节省流量，建设用这个\r\n                    // 最后修改时间（updatedAt)\r\n                    this.topices[this.editedIndex].updatedAt = response.updatedAt;\r\n                    // 从下拉框列表中查找更新后的 版块信息\r\n                    let result = this.categorySelectItems.find(item => {\r\n                        return item.value === this.currCategory;\r\n                    });\r\n                    // 更新当前数据的 版块信息\r\n                    this.topices[this.editedIndex].category = result;\r\n                    // 将结果按照 level 重新排序\r\n                    this.topices.sort((a, b) => {\r\n                        return b.level - a.level;\r\n                    });\r\n                    // 更新 当前数据方法二 到这里结束 \r\n\r\n                    this.dialog = false;   // 关闭对话框\r\n                    this.$message({\r\n                        message: '话题编辑成功',\r\n                        type: 'success'\r\n                    });\r\n                } else {\r\n                    this.$message({\r\n                        message: '出现错误, 无法完成话题的修改',\r\n                        type: 'error'\r\n                    });\r\n                }\r\n            }\r\n\r\n        },\r\n\r\n        // 删除一条数据\r\n        deleteItem(item) {\r\n            // 在数组中查找删除对象的索引\r\n            this.editedIndex = this.topices.indexOf(item);\r\n            this.editedItem = Object.assign({}, item);  // 复制要删除的对象\r\n\r\n            // 显示删除确认对话框\r\n            this.$confirm(`确定要删除标题名为：\"${item.title}\" 的话题吗？`, '删除话题', {\r\n                confirmButtonText: '确定',\r\n                cancelButtonText: '取消',\r\n                type: 'warning'\r\n            }).then(async () => {\r\n                // .then()  里面的匿名函数前要加  async \r\n                // 在服务器端执行删除操作\r\n                let response = await TopicService.delete(item.id);\r\n                if (response) {\r\n                    // 从当前显示 的数据中删除对应的项\r\n                    this.topices.splice(this.editedIndex, 1)[0];\r\n                    this.$message({\r\n                        type: 'success',\r\n                        message: '删除成功!'\r\n                    });\r\n                }\r\n            }).catch(() => {\r\n                this.$message({\r\n                    type: 'info',\r\n                    message: '已取消删除'\r\n                });\r\n            });\r\n        },\r\n\r\n        // 用于表格多选框取值的函数\r\n        mutilSelectionChange(val) {\r\n            this.selected = val;   // 保存选中的行\r\n            console.log('mutilSelectionChange:', this.selected);\r\n        },\r\n\r\n        // 批量删除已选中的多行\r\n        deleteSelected() {\r\n            // 删除话题后,其所属的版块 topicCount 应该要减一\r\n            this.$confirm(`确定要删除已选中的 ${this.selected.length} 个话题吗？`, '论坛话题删除版块', {\r\n                confirmButtonText: '确定',\r\n                cancelButtonText: '取消',\r\n                type: 'warning'\r\n            }).then(async () => {     // .then()  里面的匿名函数前要加  async \r\n                // 在服务器端执行删除操作\r\n                let response = await TopicService.deleteBatch(this.selected);\r\n                if (response) {\r\n                    this.getTopics();     // 重新载入数据 \r\n                    this.selected = [];  // 重置变量\r\n                    this.$message({\r\n                        type: 'success',\r\n                        message: '删除成功!'\r\n                    });\r\n\r\n                }\r\n            }).catch(() => {\r\n                this.$message({\r\n                    type: 'info',\r\n                    message: '已取消删除'\r\n                });\r\n            });\r\n        },\r\n\r\n        // 重置选中的多个level 值为 0， 批量修改的应用\r\n        resetSelectedLevel() {\r\n            let levels = [];  // 用于保存所有待修改的数据组成的数组\r\n\r\n            this.$confirm(`确定要将已选中的 ${this.selected.length} 个话题的 Level 值重置为 0 吗？`, '重置Level值', {\r\n                confirmButtonText: '确定',\r\n                cancelButtonText: '取消',\r\n                type: 'warning'\r\n            }).then(async () => {     // .then()  里面的匿名函数前要加  async \r\n\r\n                // 修改所有选中项的 level 值, \r\n                // 包含异步操作的时候, 还是使用 for of 比较好, \r\n                // map(), forEach() 可能会出现一些 奇怪的异常\r\n                for (let item of this.selected) {\r\n                    console.log(item);\r\n                    // 设置要修改的值, 并添加到数组\r\n                    levels.push({\r\n                        id: item.id,\r\n                        level: 0,\r\n                        lastEditor: await TopicService.currentUser(),\r\n                    });\r\n                }\r\n\r\n                // 将包含已修改值之后的所有项传到服务器端执行批量修改操作\r\n                let response = await TopicService.updateBatch(levels);\r\n                if (response) {\r\n                    this.getTopics();    // 重新载入数据 \r\n                    this.selected = [];   // 重置变量\r\n                    this.$message({\r\n                        type: 'success',\r\n                        message: '重置成功!'\r\n                    });\r\n                }\r\n            }).catch((e) => {\r\n                console.log('', e);\r\n                this.$message({\r\n                    type: 'info',\r\n                    message: '已取消重置操作'\r\n                });\r\n            });\r\n        },\r\n\r\n        // 关闭对话框时，要重置相关变量\r\n        closeDialog() {\r\n            this.dialog = false;\r\n            this.fullscreen = false;\r\n            // this.$nextTick()将回调延迟到下次 DOM 更新循环之后执行\r\n            this.$nextTick(() => {\r\n                this.editedItem = Object.assign({}, this.defaultItem);\r\n                this.editedIndex = -1;\r\n            });\r\n        },\r\n\r\n        // 修改每页大小时的方法\r\n        pageSizeChange(val) {\r\n            // 如果使用 带 .sync 修饰符的绑定，如：  :page-size.sync=\"pageSize\" \r\n            // 则不需要用下一行的方式给 页大小赋值\r\n            // this.pageSize = val;  \r\n            this.getTopics();\r\n        },\r\n\r\n        // 修改当前页时的方法\r\n        currnetPageChange(val) {\r\n            // 如果使用 带 .sync 修饰符的绑定，如：  :current-page.sync=\"currentPage\"\r\n            // 则不需要用下一行的方式给 页大小赋值\r\n            // this.currentPage = val;\r\n            this.getTopics();\r\n\r\n        },\r\n\r\n\r\n    },\r\n\r\n    // 计算属性\r\n    computed: {\r\n        // 添加或修改对话框的标题\r\n        formTitle() {\r\n            return this.editedIndex === -1 ? \"添加新话题\" : \"话题编辑\";\r\n        },\r\n\r\n        // 添加或修改对话框中 标题 文本框的宽度\r\n        formCols() {\r\n            // 添加时不用显示 Level，Title 宽度为 24\r\n            // 修改时需要显示 Level，Title 宽度为 21\r\n            return this.editedIndex === -1 ? 24 : 21;\r\n        },\r\n\r\n        // 多行文本框的行数\r\n        row() {\r\n            // 全屏状态时多行文本框 15 行，非全屏时 5行\r\n            return this.fullscreen ? 15 : 5;\r\n        }\r\n    },\r\n\r\n    // 过滤器 , 这个已经改为使得全局过滤器，不再每个 vue 文件重复定义\r\n    // filters: {\r\n    //     // 使用 moment.js 定义日期时间过滤器函数\r\n    //     datetimeFormat(val) {\r\n    //         return moment(val).format(\"lll\");\r\n    //     },\r\n    // },\r\n\r\n    // 观察属性， 函数名为变量名，当该变量值有变化时，触发函数\r\n    watch: {\r\n        // 监控变量 dialog, 当对话框关闭时，还原对话框相关的初始值 \r\n        dialog(val) {\r\n            // 相当于 if 语句的简化写法\r\n            val || this.closeDialog();\r\n        },\r\n    }\r\n\r\n}\r\n</script>\r\n\r\n<style>\r\n.header-text {\r\n    font-size: 24px;\r\n}\r\n\r\n.dialog-title {\r\n    margin-left: 12px;\r\n    font-size: 24px;\r\n}\r\n\r\n/* 分页组件靠右对齐 */\r\n.el-pagination {\r\n    text-align: right;\r\n}\r\n</style>\r\n\r\n","import mod from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js!../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./TopicManager.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js!../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./TopicManager.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./TopicManager.vue?vue&type=template&id=3a871eb5&\"\nimport script from \"./TopicManager.vue?vue&type=script&lang=js&\"\nexport * from \"./TopicManager.vue?vue&type=script&lang=js&\"\nimport style0 from \"./TopicManager.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}","import LC from 'leancloud-storage';  // 导入 leancloud 数据存储模块\r\nimport BaseService from './base_service';  // 导入访问 leancloud 数据存储的基类\r\n\r\n\r\nconst TABLE_NAME = 'Topic';  // leancloud 中存储数据的表名(Class)\r\n\r\n/**\r\n * 对leancloud应用中 名为 \"Topic\" 的 Class 进行数据操作的类\r\n */\r\nclass TopicService extends BaseService {\r\n    constructor(table_name) {\r\n        // 调用父类的构造函数\r\n        super(table_name);\r\n        // 当前子类的属性 this.TABLE_NAME\r\n        this.TABLE_NAME = table_name;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * 查询指定 id 的版块 的前 n 条记录\r\n * @param {*} id 版块的id\r\n * @param {*} limit 返回的记录数\r\n * @returns \r\n */\r\nTopicService.prototype.getTopicByCategory = async function (id, limit = 5, skip = 0, sort_field = '-createdAt') {\r\n    // console.log(`category id:`, id);\r\n    try {\r\n        let query = new LC.Query(this.TABLE_NAME);\r\n        const board = LC.Object.createWithoutData('Category', id);  // 根据 id 获取版块的原始数据\r\n        query.include(['createdBy', 'lastEditor']);  // 包含查询, 获取 创建者和修改者的详细信息\r\n        query.equalTo('category', board)    // 关系查询\r\n            .descending('level');           // 第一排序属性：降序\r\n\r\n        // 第二排序属性： this.isMinus()  是父类中定义的方法，判断排序的字段是否 负号 开头\r\n        if (this.isMinus(sort_field)) {\r\n            console.log(sort_field, sort_field.substr(1));\r\n            // 去掉负号后的字段名降序\r\n            query.addDescending(sort_field.substr(1));\r\n        }\r\n        else {\r\n            query.addAscending(sort_field);  // 升序\r\n        }\r\n\r\n        // 指定需要返回的属性，并包括内置属性 objectId、createdAt 和 updatedAt\r\n        query.select(['title', 'level', 'reply', 'views', 'level', 'createdBy', 'lastEditor']);\r\n        let total = await query.count();   // 返回记录总数\r\n        console.log('total:', total);\r\n        // 分页查询参数\r\n        let response = await query.limit(limit).skip(skip).find();\r\n        console.log('getTopicByCategory:', total, response);\r\n        return {\r\n            \"status_code\": \"ok\",\r\n            \"totalCount\": total,\r\n            \"reslut\": response,\r\n        }\r\n    } catch (e) {\r\n        console.log('查询数据错误：', e.code, e);\r\n        return {\r\n            \"status_code\": e.code,\r\n            \"totalCount\": 0,\r\n            \"reslut\": e,\r\n        };\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n// 导出子类时使用 new 直接进行实例化\r\nexport default new TopicService(TABLE_NAME);","class Topic {\r\n    constructor(title = '', content = '') {\r\n        this.title = title;\r\n        this.content = content;\r\n        this.views = 0;\r\n        this.reply = 0;\r\n        this.level = 0;\r\n    }\r\n}\r\n\r\nTopic.prototype.formJson = function (item) {\r\n    return {\r\n        id: item.id,\r\n        category: item.get('category')\r\n            ? getCategory(item.get('category'))\r\n            : '',\r\n        title: item.get('title'),\r\n        content: item.get('content'),\r\n        views: item.get('views'),\r\n        reply: item.get('reply'),\r\n        level: item.get('level'),\r\n        createdAt: item.createdAt,\r\n        updatedAt: item.updatedAt,\r\n        createdBy: item.get(\"createdBy\")\r\n            ? getUser(item.get(\"createdBy\"))\r\n            : \"\",\r\n        lastEditor: item.get(\"lastEditor\")\r\n            ? getUser(item.get(\"lastEditor\"))\r\n            : \"\",\r\n    }\r\n}\r\n\r\n// 版块, 此处数据适用于下拉框\r\nfunction getCategory(item) {\r\n    return {\r\n        label: item.get('title'),\r\n        value: item.id,\r\n    }\r\n}\r\n\r\n// 获取用户表中各个字段的值\r\nfunction getUser(user) {\r\n    // console.log(user);\r\n    return {\r\n        id: user.id,\r\n        username: user.get(\"username\"),\r\n        email: user.get(\"email\"),\r\n    };\r\n}\r\nexport default Topic;","export * from \"-!../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./TopicManager.vue?vue&type=style&index=0&lang=css&\""],"sourceRoot":""}